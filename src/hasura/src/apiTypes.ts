import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by @pongsatt/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * query root
 */
export interface GQLquery_root {

  /**
   * fetch data from the table: "deployment_versions"
   */
  deployment_versions: GQLdeployment_versions[];

  /**
   * fetch aggregated fields from the table: "deployment_versions"
   */
  deployment_versions_aggregate: GQLdeployment_versions_aggregate;

  /**
   * fetch data from the table: "deployment_versions" using primary key columns
   */
  deployment_versions_by_pk?: GQLdeployment_versions;

  /**
   * fetch data from the table: "deployments"
   */
  deployments: GQLdeployments[];

  /**
   * fetch aggregated fields from the table: "deployments"
   */
  deployments_aggregate: GQLdeployments_aggregate;

  /**
   * fetch data from the table: "deployments" using primary key columns
   */
  deployments_by_pk?: GQLdeployments;
}

/**
 * select columns of table "deployment_versions"
 */
export enum GQLdeployment_versions_select_column {

  /**
   * column name
   */
  build_host_name = 'build_host_name',

  /**
   * column name
   */
  built_at = 'built_at',

  /**
   * column name
   */
  configuration = 'configuration',

  /**
   * column name
   */
  deployed_at = 'deployed_at',

  /**
   * column name
   */
  deployment_id = 'deployment_id',

  /**
   * column name
   */
  docker_image = 'docker_image',

  /**
   * column name
   */
  docker_image_tag = 'docker_image_tag',

  /**
   * column name
   */
  env = 'env',

  /**
   * column name
   */
  git_branch = 'git_branch',

  /**
   * column name
   */
  git_commit = 'git_commit',

  /**
   * column name
   */
  git_hash = 'git_hash',

  /**
   * column name
   */
  git_url = 'git_url',

  /**
   * column name
   */
  id = 'id',

  /**
   * column name
   */
  kubernetes_deployment_files = 'kubernetes_deployment_files',

  /**
   * column name
   */
  last_commits = 'last_commits',

  /**
   * column name
   */
  version = 'version'
}

/**
 * ordering options when selecting data from "deployment_versions"
 */
export interface GQLdeployment_versions_order_by {
  build_host_name?: GQLorder_by;
  built_at?: GQLorder_by;
  configuration?: GQLorder_by;
  deployed_at?: GQLorder_by;
  deployment?: GQLdeployments_order_by;
  deployment_id?: GQLorder_by;
  docker_image?: GQLorder_by;
  docker_image_tag?: GQLorder_by;
  env?: GQLorder_by;
  git_branch?: GQLorder_by;
  git_commit?: GQLorder_by;
  git_hash?: GQLorder_by;
  git_url?: GQLorder_by;
  id?: GQLorder_by;
  kubernetes_deployment_files?: GQLorder_by;
  last_commits?: GQLorder_by;
  version?: GQLorder_by;
}

/**
 * column ordering options
 */
export enum GQLorder_by {

  /**
   * in the ascending order, nulls last
   */
  asc = 'asc',

  /**
   * in the ascending order, nulls first
   */
  asc_nulls_first = 'asc_nulls_first',

  /**
   * in the ascending order, nulls last
   */
  asc_nulls_last = 'asc_nulls_last',

  /**
   * in the descending order, nulls first
   */
  desc = 'desc',

  /**
   * in the descending order, nulls first
   */
  desc_nulls_first = 'desc_nulls_first',

  /**
   * in the descending order, nulls last
   */
  desc_nulls_last = 'desc_nulls_last'
}

/**
 * ordering options when selecting data from "deployments"
 */
export interface GQLdeployments_order_by {
  db_migration_image?: GQLorder_by;
  deployer_role?: GQLorder_by;
  deployment_type?: GQLorder_by;
  deployment_versions_aggregate?: GQLdeployment_versions_aggregate_order_by;
  description?: GQLorder_by;
  display_name?: GQLorder_by;
  env?: GQLorder_by;
  hyperlinks?: GQLorder_by;
  id?: GQLorder_by;
  last_deployment_timestamp?: GQLorder_by;
}

/**
 * order by aggregate values of table "deployment_versions"
 */
export interface GQLdeployment_versions_aggregate_order_by {
  count?: GQLorder_by;
  max?: GQLdeployment_versions_max_order_by;
  min?: GQLdeployment_versions_min_order_by;
}

/**
 * order by max() on columns of table "deployment_versions"
 */
export interface GQLdeployment_versions_max_order_by {
  build_host_name?: GQLorder_by;
  deployment_id?: GQLorder_by;
  docker_image?: GQLorder_by;
  docker_image_tag?: GQLorder_by;
  env?: GQLorder_by;
  git_branch?: GQLorder_by;
  git_commit?: GQLorder_by;
  git_hash?: GQLorder_by;
  git_url?: GQLorder_by;
  id?: GQLorder_by;
  last_commits?: GQLorder_by;
  version?: GQLorder_by;
}

/**
 * order by min() on columns of table "deployment_versions"
 */
export interface GQLdeployment_versions_min_order_by {
  build_host_name?: GQLorder_by;
  deployment_id?: GQLorder_by;
  docker_image?: GQLorder_by;
  docker_image_tag?: GQLorder_by;
  env?: GQLorder_by;
  git_branch?: GQLorder_by;
  git_commit?: GQLorder_by;
  git_hash?: GQLorder_by;
  git_url?: GQLorder_by;
  id?: GQLorder_by;
  last_commits?: GQLorder_by;
  version?: GQLorder_by;
}

/**
 * Boolean expression to filter rows from the table "deployment_versions". All fields are combined with a logical 'AND'.
 */
export interface GQLdeployment_versions_bool_exp {
  _and?: (GQLdeployment_versions_bool_exp | null)[];
  _not?: GQLdeployment_versions_bool_exp;
  _or?: (GQLdeployment_versions_bool_exp | null)[];
  build_host_name?: GQLString_comparison_exp;
  built_at?: GQLtimestamp_comparison_exp;
  configuration?: GQLjsonb_comparison_exp;
  deployed_at?: GQLtimestamp_comparison_exp;
  deployment?: GQLdeployments_bool_exp;
  deployment_id?: GQLString_comparison_exp;
  docker_image?: GQLString_comparison_exp;
  docker_image_tag?: GQLString_comparison_exp;
  env?: GQLString_comparison_exp;
  git_branch?: GQLString_comparison_exp;
  git_commit?: GQLString_comparison_exp;
  git_hash?: GQLString_comparison_exp;
  git_url?: GQLString_comparison_exp;
  id?: GQLString_comparison_exp;
  kubernetes_deployment_files?: GQLjsonb_comparison_exp;
  last_commits?: GQLString_comparison_exp;
  version?: GQLString_comparison_exp;
}

/**
 * expression to compare columns of type String. All fields are combined with logical 'AND'.
 */
export interface GQLString_comparison_exp {
  _eq?: string;
  _gt?: string;
  _gte?: string;
  _ilike?: string;
  _in?: string[];
  _is_null?: boolean;
  _like?: string;
  _lt?: string;
  _lte?: string;
  _neq?: string;
  _nilike?: string;
  _nin?: string[];
  _nlike?: string;
  _nsimilar?: string;
  _similar?: string;
}

/**
 * expression to compare columns of type timestamp. All fields are combined with logical 'AND'.
 */
export interface GQLtimestamp_comparison_exp {
  _eq?: GQLtimestamp;
  _gt?: GQLtimestamp;
  _gte?: GQLtimestamp;
  _in?: GQLtimestamp[];
  _is_null?: boolean;
  _lt?: GQLtimestamp;
  _lte?: GQLtimestamp;
  _neq?: GQLtimestamp;
  _nin?: GQLtimestamp[];
}

export type GQLtimestamp = any;

/**
 * expression to compare columns of type jsonb. All fields are combined with logical 'AND'.
 */
export interface GQLjsonb_comparison_exp {

  /**
   * is the column contained in the given json value
   */
  _contained_in?: GQLjsonb;

  /**
   * does the column contain the given json value at the top level
   */
  _contains?: GQLjsonb;
  _eq?: GQLjsonb;
  _gt?: GQLjsonb;
  _gte?: GQLjsonb;

  /**
   * does the string exist as a top-level key in the column
   */
  _has_key?: string;

  /**
   * do all of these strings exist as top-level keys in the column
   */
  _has_keys_all?: string[];

  /**
   * do any of these strings exist as top-level keys in the column
   */
  _has_keys_any?: string[];
  _in?: GQLjsonb[];
  _is_null?: boolean;
  _lt?: GQLjsonb;
  _lte?: GQLjsonb;
  _neq?: GQLjsonb;
  _nin?: GQLjsonb[];
}

export type GQLjsonb = any;

/**
 * Boolean expression to filter rows from the table "deployments". All fields are combined with a logical 'AND'.
 */
export interface GQLdeployments_bool_exp {
  _and?: (GQLdeployments_bool_exp | null)[];
  _not?: GQLdeployments_bool_exp;
  _or?: (GQLdeployments_bool_exp | null)[];
  db_migration_image?: GQLString_comparison_exp;
  deployer_role?: GQLString_comparison_exp;
  deployment_type?: GQLString_comparison_exp;
  deployment_versions?: GQLdeployment_versions_bool_exp;
  description?: GQLString_comparison_exp;
  display_name?: GQLString_comparison_exp;
  env?: GQLString_comparison_exp;
  hyperlinks?: GQLjsonb_comparison_exp;
  id?: GQLString_comparison_exp;
  last_deployment_timestamp?: GQLtimestamp_comparison_exp;
}

/**
 * columns and relationships of "deployment_versions"
 */
export interface GQLdeployment_versions {
  build_host_name?: string;
  built_at?: GQLtimestamp;
  configuration?: GQLjsonb;
  deployed_at?: GQLtimestamp;

  /**
   * An object relationship
   */
  deployment?: GQLdeployments;
  deployment_id?: string;
  docker_image?: string;
  docker_image_tag?: string;
  env?: string;
  git_branch?: string;
  git_commit?: string;
  git_hash?: string;
  git_url?: string;
  id: string;
  kubernetes_deployment_files?: GQLjsonb;
  last_commits?: string;
  version?: string;
}

/**
 * columns and relationships of "deployments"
 */
export interface GQLdeployments {
  db_migration_image?: string;
  deployer_role: string;
  deployment_type: string;

  /**
   * An array relationship
   */
  deployment_versions: GQLdeployment_versions[];

  /**
   * An aggregated array relationship
   */
  deployment_versions_aggregate: GQLdeployment_versions_aggregate;
  description: string;
  display_name: string;
  env?: string;
  hyperlinks?: GQLjsonb;
  id: string;
  last_deployment_timestamp: GQLtimestamp;
}

/**
 * aggregated selection of "deployment_versions"
 */
export interface GQLdeployment_versions_aggregate {
  aggregate?: GQLdeployment_versions_aggregate_fields;
  nodes: GQLdeployment_versions[];
}

/**
 * aggregate fields of "deployment_versions"
 */
export interface GQLdeployment_versions_aggregate_fields {
  count?: number;
  max?: GQLdeployment_versions_max_fields;
  min?: GQLdeployment_versions_min_fields;
}

/**
 * aggregate max on columns
 */
export interface GQLdeployment_versions_max_fields {
  build_host_name?: string;
  deployment_id?: string;
  docker_image?: string;
  docker_image_tag?: string;
  env?: string;
  git_branch?: string;
  git_commit?: string;
  git_hash?: string;
  git_url?: string;
  id?: string;
  last_commits?: string;
  version?: string;
}

/**
 * aggregate min on columns
 */
export interface GQLdeployment_versions_min_fields {
  build_host_name?: string;
  deployment_id?: string;
  docker_image?: string;
  docker_image_tag?: string;
  env?: string;
  git_branch?: string;
  git_commit?: string;
  git_hash?: string;
  git_url?: string;
  id?: string;
  last_commits?: string;
  version?: string;
}

/**
 * select columns of table "deployments"
 */
export enum GQLdeployments_select_column {

  /**
   * column name
   */
  db_migration_image = 'db_migration_image',

  /**
   * column name
   */
  deployer_role = 'deployer_role',

  /**
   * column name
   */
  deployment_type = 'deployment_type',

  /**
   * column name
   */
  description = 'description',

  /**
   * column name
   */
  display_name = 'display_name',

  /**
   * column name
   */
  env = 'env',

  /**
   * column name
   */
  hyperlinks = 'hyperlinks',

  /**
   * column name
   */
  id = 'id',

  /**
   * column name
   */
  last_deployment_timestamp = 'last_deployment_timestamp'
}

/**
 * aggregated selection of "deployments"
 */
export interface GQLdeployments_aggregate {
  aggregate?: GQLdeployments_aggregate_fields;
  nodes: GQLdeployments[];
}

/**
 * aggregate fields of "deployments"
 */
export interface GQLdeployments_aggregate_fields {
  count?: number;
  max?: GQLdeployments_max_fields;
  min?: GQLdeployments_min_fields;
}

/**
 * aggregate max on columns
 */
export interface GQLdeployments_max_fields {
  db_migration_image?: string;
  deployer_role?: string;
  deployment_type?: string;
  description?: string;
  display_name?: string;
  env?: string;
  id?: string;
}

/**
 * aggregate min on columns
 */
export interface GQLdeployments_min_fields {
  db_migration_image?: string;
  deployer_role?: string;
  deployment_type?: string;
  description?: string;
  display_name?: string;
  env?: string;
  id?: string;
}

/**
 * mutation root
 */
export interface GQLmutation_root {

  /**
   * delete data from the table: "deployment_versions"
   */
  delete_deployment_versions?: GQLdeployment_versions_mutation_response;

  /**
   * delete data from the table: "deployments"
   */
  delete_deployments?: GQLdeployments_mutation_response;

  /**
   * insert data into the table: "deployment_versions"
   */
  insert_deployment_versions?: GQLdeployment_versions_mutation_response;

  /**
   * insert data into the table: "deployments"
   */
  insert_deployments?: GQLdeployments_mutation_response;

  /**
   * update data of the table: "deployment_versions"
   */
  update_deployment_versions?: GQLdeployment_versions_mutation_response;

  /**
   * update data of the table: "deployments"
   */
  update_deployments?: GQLdeployments_mutation_response;
}

/**
 * response of any mutation on the table "deployment_versions"
 */
export interface GQLdeployment_versions_mutation_response {

  /**
   * number of affected rows by the mutation
   */
  affected_rows: number;

  /**
   * data of the affected rows by the mutation
   */
  returning: GQLdeployment_versions[];
}

/**
 * response of any mutation on the table "deployments"
 */
export interface GQLdeployments_mutation_response {

  /**
   * number of affected rows by the mutation
   */
  affected_rows: number;

  /**
   * data of the affected rows by the mutation
   */
  returning: GQLdeployments[];
}

/**
 * input type for inserting data into table "deployment_versions"
 */
export interface GQLdeployment_versions_insert_input {
  build_host_name?: string;
  built_at?: GQLtimestamp;
  configuration?: GQLjsonb;
  deployed_at?: GQLtimestamp;
  deployment?: GQLdeployments_obj_rel_insert_input;
  deployment_id?: string;
  docker_image?: string;
  docker_image_tag?: string;
  env?: string;
  git_branch?: string;
  git_commit?: string;
  git_hash?: string;
  git_url?: string;
  id?: string;
  kubernetes_deployment_files?: GQLjsonb;
  last_commits?: string;
  version?: string;
}

/**
 * input type for inserting object relation for remote table "deployments"
 */
export interface GQLdeployments_obj_rel_insert_input {
  data: GQLdeployments_insert_input;
  on_conflict?: GQLdeployments_on_conflict;
}

/**
 * input type for inserting data into table "deployments"
 */
export interface GQLdeployments_insert_input {
  db_migration_image?: string;
  deployer_role?: string;
  deployment_type?: string;
  deployment_versions?: GQLdeployment_versions_arr_rel_insert_input;
  description?: string;
  display_name?: string;
  env?: string;
  hyperlinks?: GQLjsonb;
  id?: string;
  last_deployment_timestamp?: GQLtimestamp;
}

/**
 * input type for inserting array relation for remote table "deployment_versions"
 */
export interface GQLdeployment_versions_arr_rel_insert_input {
  data: GQLdeployment_versions_insert_input[];
  on_conflict?: GQLdeployment_versions_on_conflict;
}

/**
 * on conflict condition type for table "deployment_versions"
 */
export interface GQLdeployment_versions_on_conflict {
  constraint: GQLdeployment_versions_constraint;
  update_columns: GQLdeployment_versions_update_column[];
  where?: GQLdeployment_versions_bool_exp;
}

/**
 * unique or primary key constraints on table "deployment_versions"
 */
export enum GQLdeployment_versions_constraint {

  /**
   * unique or primary key constraint
   */
  deployment_versions_pkey = 'deployment_versions_pkey'
}

/**
 * update columns of table "deployment_versions"
 */
export enum GQLdeployment_versions_update_column {

  /**
   * column name
   */
  build_host_name = 'build_host_name',

  /**
   * column name
   */
  built_at = 'built_at',

  /**
   * column name
   */
  configuration = 'configuration',

  /**
   * column name
   */
  deployed_at = 'deployed_at',

  /**
   * column name
   */
  deployment_id = 'deployment_id',

  /**
   * column name
   */
  docker_image = 'docker_image',

  /**
   * column name
   */
  docker_image_tag = 'docker_image_tag',

  /**
   * column name
   */
  env = 'env',

  /**
   * column name
   */
  git_branch = 'git_branch',

  /**
   * column name
   */
  git_commit = 'git_commit',

  /**
   * column name
   */
  git_hash = 'git_hash',

  /**
   * column name
   */
  git_url = 'git_url',

  /**
   * column name
   */
  id = 'id',

  /**
   * column name
   */
  kubernetes_deployment_files = 'kubernetes_deployment_files',

  /**
   * column name
   */
  last_commits = 'last_commits',

  /**
   * column name
   */
  version = 'version'
}

/**
 * on conflict condition type for table "deployments"
 */
export interface GQLdeployments_on_conflict {
  constraint: GQLdeployments_constraint;
  update_columns: GQLdeployments_update_column[];
  where?: GQLdeployments_bool_exp;
}

/**
 * unique or primary key constraints on table "deployments"
 */
export enum GQLdeployments_constraint {

  /**
   * unique or primary key constraint
   */
  deployments_pkey = 'deployments_pkey'
}

/**
 * update columns of table "deployments"
 */
export enum GQLdeployments_update_column {

  /**
   * column name
   */
  db_migration_image = 'db_migration_image',

  /**
   * column name
   */
  deployer_role = 'deployer_role',

  /**
   * column name
   */
  deployment_type = 'deployment_type',

  /**
   * column name
   */
  description = 'description',

  /**
   * column name
   */
  display_name = 'display_name',

  /**
   * column name
   */
  env = 'env',

  /**
   * column name
   */
  hyperlinks = 'hyperlinks',

  /**
   * column name
   */
  id = 'id',

  /**
   * column name
   */
  last_deployment_timestamp = 'last_deployment_timestamp'
}

/**
 * append existing jsonb value of filtered columns with new jsonb value
 */
export interface GQLdeployment_versions_append_input {
  configuration?: GQLjsonb;
  kubernetes_deployment_files?: GQLjsonb;
}

/**
 * delete the field or element with specified path (for JSON arrays, negative integers count from the end)
 */
export interface GQLdeployment_versions_delete_at_path_input {
  configuration?: (string | null)[];
  kubernetes_deployment_files?: (string | null)[];
}

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export interface GQLdeployment_versions_delete_elem_input {
  configuration?: number;
  kubernetes_deployment_files?: number;
}

/**
 * delete key/value pair or string element. key/value pairs are matched based on their key value
 */
export interface GQLdeployment_versions_delete_key_input {
  configuration?: string;
  kubernetes_deployment_files?: string;
}

/**
 * prepend existing jsonb value of filtered columns with new jsonb value
 */
export interface GQLdeployment_versions_prepend_input {
  configuration?: GQLjsonb;
  kubernetes_deployment_files?: GQLjsonb;
}

/**
 * input type for updating data in table "deployment_versions"
 */
export interface GQLdeployment_versions_set_input {
  build_host_name?: string;
  built_at?: GQLtimestamp;
  configuration?: GQLjsonb;
  deployed_at?: GQLtimestamp;
  deployment_id?: string;
  docker_image?: string;
  docker_image_tag?: string;
  env?: string;
  git_branch?: string;
  git_commit?: string;
  git_hash?: string;
  git_url?: string;
  id?: string;
  kubernetes_deployment_files?: GQLjsonb;
  last_commits?: string;
  version?: string;
}

/**
 * append existing jsonb value of filtered columns with new jsonb value
 */
export interface GQLdeployments_append_input {
  hyperlinks?: GQLjsonb;
}

/**
 * delete the field or element with specified path (for JSON arrays, negative integers count from the end)
 */
export interface GQLdeployments_delete_at_path_input {
  hyperlinks?: (string | null)[];
}

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export interface GQLdeployments_delete_elem_input {
  hyperlinks?: number;
}

/**
 * delete key/value pair or string element. key/value pairs are matched based on their key value
 */
export interface GQLdeployments_delete_key_input {
  hyperlinks?: string;
}

/**
 * prepend existing jsonb value of filtered columns with new jsonb value
 */
export interface GQLdeployments_prepend_input {
  hyperlinks?: GQLjsonb;
}

/**
 * input type for updating data in table "deployments"
 */
export interface GQLdeployments_set_input {
  db_migration_image?: string;
  deployer_role?: string;
  deployment_type?: string;
  description?: string;
  display_name?: string;
  env?: string;
  hyperlinks?: GQLjsonb;
  id?: string;
  last_deployment_timestamp?: GQLtimestamp;
}

/**
 * subscription root
 */
export interface GQLsubscription_root {

  /**
   * fetch data from the table: "deployment_versions"
   */
  deployment_versions: GQLdeployment_versions[];

  /**
   * fetch aggregated fields from the table: "deployment_versions"
   */
  deployment_versions_aggregate: GQLdeployment_versions_aggregate;

  /**
   * fetch data from the table: "deployment_versions" using primary key columns
   */
  deployment_versions_by_pk?: GQLdeployment_versions;

  /**
   * fetch data from the table: "deployments"
   */
  deployments: GQLdeployments[];

  /**
   * fetch aggregated fields from the table: "deployments"
   */
  deployments_aggregate: GQLdeployments_aggregate;

  /**
   * fetch data from the table: "deployments" using primary key columns
   */
  deployments_by_pk?: GQLdeployments;
}

/**
 * input type for inserting object relation for remote table "deployment_versions"
 */
export interface GQLdeployment_versions_obj_rel_insert_input {
  data: GQLdeployment_versions_insert_input;
  on_conflict?: GQLdeployment_versions_on_conflict;
}

/**
 * order by aggregate values of table "deployments"
 */
export interface GQLdeployments_aggregate_order_by {
  count?: GQLorder_by;
  max?: GQLdeployments_max_order_by;
  min?: GQLdeployments_min_order_by;
}

/**
 * order by max() on columns of table "deployments"
 */
export interface GQLdeployments_max_order_by {
  db_migration_image?: GQLorder_by;
  deployer_role?: GQLorder_by;
  deployment_type?: GQLorder_by;
  description?: GQLorder_by;
  display_name?: GQLorder_by;
  env?: GQLorder_by;
  id?: GQLorder_by;
}

/**
 * order by min() on columns of table "deployments"
 */
export interface GQLdeployments_min_order_by {
  db_migration_image?: GQLorder_by;
  deployer_role?: GQLorder_by;
  deployment_type?: GQLorder_by;
  description?: GQLorder_by;
  display_name?: GQLorder_by;
  env?: GQLorder_by;
  id?: GQLorder_by;
}

/**
 * input type for inserting array relation for remote table "deployments"
 */
export interface GQLdeployments_arr_rel_insert_input {
  data: GQLdeployments_insert_input[];
  on_conflict?: GQLdeployments_on_conflict;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  query_root?: GQLquery_rootTypeResolver;
  timestamp?: GraphQLScalarType;
  jsonb?: GraphQLScalarType;
  deployment_versions?: GQLdeployment_versionsTypeResolver;
  deployments?: GQLdeploymentsTypeResolver;
  deployment_versions_aggregate?: GQLdeployment_versions_aggregateTypeResolver;
  deployment_versions_aggregate_fields?: GQLdeployment_versions_aggregate_fieldsTypeResolver;
  deployment_versions_max_fields?: GQLdeployment_versions_max_fieldsTypeResolver;
  deployment_versions_min_fields?: GQLdeployment_versions_min_fieldsTypeResolver;
  deployments_aggregate?: GQLdeployments_aggregateTypeResolver;
  deployments_aggregate_fields?: GQLdeployments_aggregate_fieldsTypeResolver;
  deployments_max_fields?: GQLdeployments_max_fieldsTypeResolver;
  deployments_min_fields?: GQLdeployments_min_fieldsTypeResolver;
  mutation_root?: GQLmutation_rootTypeResolver;
  deployment_versions_mutation_response?: GQLdeployment_versions_mutation_responseTypeResolver;
  deployments_mutation_response?: GQLdeployments_mutation_responseTypeResolver;
  subscription_root?: GQLsubscription_rootTypeResolver;
}
export interface GQLquery_rootTypeResolver<TParent = any> {
  deployment_versions?: query_rootToDeployment_versionsResolver<TParent>;
  deployment_versions_aggregate?: query_rootToDeployment_versions_aggregateResolver<TParent>;
  deployment_versions_by_pk?: query_rootToDeployment_versions_by_pkResolver<TParent>;
  deployments?: query_rootToDeploymentsResolver<TParent>;
  deployments_aggregate?: query_rootToDeployments_aggregateResolver<TParent>;
  deployments_by_pk?: query_rootToDeployments_by_pkResolver<TParent>;
}

export interface query_rootToDeployment_versionsArgs {
  distinct_on?: GQLdeployment_versions_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployment_versions_order_by[];
  where?: GQLdeployment_versions_bool_exp;
}
export interface query_rootToDeployment_versionsResolver<TParent = any, TResult = Array<GQLdeployment_versions>|Promise<Array<GQLdeployment_versions>>> {
  (parent: TParent, args: query_rootToDeployment_versionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface query_rootToDeployment_versions_aggregateArgs {
  distinct_on?: GQLdeployment_versions_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployment_versions_order_by[];
  where?: GQLdeployment_versions_bool_exp;
}
export interface query_rootToDeployment_versions_aggregateResolver<TParent = any, TResult = GQLdeployment_versions_aggregate|Promise<GQLdeployment_versions_aggregate>> {
  (parent: TParent, args: query_rootToDeployment_versions_aggregateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface query_rootToDeployment_versions_by_pkArgs {
  id: string;
}
export interface query_rootToDeployment_versions_by_pkResolver<TParent = any, TResult = GQLdeployment_versions|Promise<GQLdeployment_versions>> {
  (parent: TParent, args: query_rootToDeployment_versions_by_pkArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface query_rootToDeploymentsArgs {
  distinct_on?: GQLdeployments_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployments_order_by[];
  where?: GQLdeployments_bool_exp;
}
export interface query_rootToDeploymentsResolver<TParent = any, TResult = Array<GQLdeployments>|Promise<Array<GQLdeployments>>> {
  (parent: TParent, args: query_rootToDeploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface query_rootToDeployments_aggregateArgs {
  distinct_on?: GQLdeployments_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployments_order_by[];
  where?: GQLdeployments_bool_exp;
}
export interface query_rootToDeployments_aggregateResolver<TParent = any, TResult = GQLdeployments_aggregate|Promise<GQLdeployments_aggregate>> {
  (parent: TParent, args: query_rootToDeployments_aggregateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface query_rootToDeployments_by_pkArgs {
  id: string;
}
export interface query_rootToDeployments_by_pkResolver<TParent = any, TResult = GQLdeployments|Promise<GQLdeployments>> {
  (parent: TParent, args: query_rootToDeployments_by_pkArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployment_versionsTypeResolver<TParent = any> {
  build_host_name?: deployment_versionsToBuild_host_nameResolver<TParent>;
  built_at?: deployment_versionsToBuilt_atResolver<TParent>;
  configuration?: deployment_versionsToConfigurationResolver<TParent>;
  deployed_at?: deployment_versionsToDeployed_atResolver<TParent>;
  deployment?: deployment_versionsToDeploymentResolver<TParent>;
  deployment_id?: deployment_versionsToDeployment_idResolver<TParent>;
  docker_image?: deployment_versionsToDocker_imageResolver<TParent>;
  docker_image_tag?: deployment_versionsToDocker_image_tagResolver<TParent>;
  env?: deployment_versionsToEnvResolver<TParent>;
  git_branch?: deployment_versionsToGit_branchResolver<TParent>;
  git_commit?: deployment_versionsToGit_commitResolver<TParent>;
  git_hash?: deployment_versionsToGit_hashResolver<TParent>;
  git_url?: deployment_versionsToGit_urlResolver<TParent>;
  id?: deployment_versionsToIdResolver<TParent>;
  kubernetes_deployment_files?: deployment_versionsToKubernetes_deployment_filesResolver<TParent>;
  last_commits?: deployment_versionsToLast_commitsResolver<TParent>;
  version?: deployment_versionsToVersionResolver<TParent>;
}

export interface deployment_versionsToBuild_host_nameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToBuilt_atResolver<TParent = any, TResult = GQLtimestamp|Promise<GQLtimestamp>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToConfigurationArgs {
  path?: string;
}
export interface deployment_versionsToConfigurationResolver<TParent = any, TResult = GQLjsonb|Promise<GQLjsonb>> {
  (parent: TParent, args: deployment_versionsToConfigurationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToDeployed_atResolver<TParent = any, TResult = GQLtimestamp|Promise<GQLtimestamp>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToDeploymentResolver<TParent = any, TResult = GQLdeployments|Promise<GQLdeployments>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToDeployment_idResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToDocker_imageResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToDocker_image_tagResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToEnvResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToGit_branchResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToGit_commitResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToGit_hashResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToGit_urlResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToKubernetes_deployment_filesArgs {
  path?: string;
}
export interface deployment_versionsToKubernetes_deployment_filesResolver<TParent = any, TResult = GQLjsonb|Promise<GQLjsonb>> {
  (parent: TParent, args: deployment_versionsToKubernetes_deployment_filesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToLast_commitsResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versionsToVersionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeploymentsTypeResolver<TParent = any> {
  db_migration_image?: deploymentsToDb_migration_imageResolver<TParent>;
  deployer_role?: deploymentsToDeployer_roleResolver<TParent>;
  deployment_type?: deploymentsToDeployment_typeResolver<TParent>;
  deployment_versions?: deploymentsToDeployment_versionsResolver<TParent>;
  deployment_versions_aggregate?: deploymentsToDeployment_versions_aggregateResolver<TParent>;
  description?: deploymentsToDescriptionResolver<TParent>;
  display_name?: deploymentsToDisplay_nameResolver<TParent>;
  env?: deploymentsToEnvResolver<TParent>;
  hyperlinks?: deploymentsToHyperlinksResolver<TParent>;
  id?: deploymentsToIdResolver<TParent>;
  last_deployment_timestamp?: deploymentsToLast_deployment_timestampResolver<TParent>;
}

export interface deploymentsToDb_migration_imageResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToDeployer_roleResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToDeployment_typeResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToDeployment_versionsArgs {
  distinct_on?: GQLdeployment_versions_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployment_versions_order_by[];
  where?: GQLdeployment_versions_bool_exp;
}
export interface deploymentsToDeployment_versionsResolver<TParent = any, TResult = Array<GQLdeployment_versions>|Promise<Array<GQLdeployment_versions>>> {
  (parent: TParent, args: deploymentsToDeployment_versionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToDeployment_versions_aggregateArgs {
  distinct_on?: GQLdeployment_versions_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployment_versions_order_by[];
  where?: GQLdeployment_versions_bool_exp;
}
export interface deploymentsToDeployment_versions_aggregateResolver<TParent = any, TResult = GQLdeployment_versions_aggregate|Promise<GQLdeployment_versions_aggregate>> {
  (parent: TParent, args: deploymentsToDeployment_versions_aggregateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToDescriptionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToDisplay_nameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToEnvResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToHyperlinksArgs {
  path?: string;
}
export interface deploymentsToHyperlinksResolver<TParent = any, TResult = GQLjsonb|Promise<GQLjsonb>> {
  (parent: TParent, args: deploymentsToHyperlinksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deploymentsToLast_deployment_timestampResolver<TParent = any, TResult = GQLtimestamp|Promise<GQLtimestamp>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployment_versions_aggregateTypeResolver<TParent = any> {
  aggregate?: deployment_versions_aggregateToAggregateResolver<TParent>;
  nodes?: deployment_versions_aggregateToNodesResolver<TParent>;
}

export interface deployment_versions_aggregateToAggregateResolver<TParent = any, TResult = GQLdeployment_versions_aggregate_fields|Promise<GQLdeployment_versions_aggregate_fields>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_aggregateToNodesResolver<TParent = any, TResult = Array<GQLdeployment_versions>|Promise<Array<GQLdeployment_versions>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployment_versions_aggregate_fieldsTypeResolver<TParent = any> {
  count?: deployment_versions_aggregate_fieldsToCountResolver<TParent>;
  max?: deployment_versions_aggregate_fieldsToMaxResolver<TParent>;
  min?: deployment_versions_aggregate_fieldsToMinResolver<TParent>;
}

export interface deployment_versions_aggregate_fieldsToCountArgs {
  columns?: GQLdeployment_versions_select_column[];
  distinct?: boolean;
}
export interface deployment_versions_aggregate_fieldsToCountResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: deployment_versions_aggregate_fieldsToCountArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_aggregate_fieldsToMaxResolver<TParent = any, TResult = GQLdeployment_versions_max_fields|Promise<GQLdeployment_versions_max_fields>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_aggregate_fieldsToMinResolver<TParent = any, TResult = GQLdeployment_versions_min_fields|Promise<GQLdeployment_versions_min_fields>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployment_versions_max_fieldsTypeResolver<TParent = any> {
  build_host_name?: deployment_versions_max_fieldsToBuild_host_nameResolver<TParent>;
  deployment_id?: deployment_versions_max_fieldsToDeployment_idResolver<TParent>;
  docker_image?: deployment_versions_max_fieldsToDocker_imageResolver<TParent>;
  docker_image_tag?: deployment_versions_max_fieldsToDocker_image_tagResolver<TParent>;
  env?: deployment_versions_max_fieldsToEnvResolver<TParent>;
  git_branch?: deployment_versions_max_fieldsToGit_branchResolver<TParent>;
  git_commit?: deployment_versions_max_fieldsToGit_commitResolver<TParent>;
  git_hash?: deployment_versions_max_fieldsToGit_hashResolver<TParent>;
  git_url?: deployment_versions_max_fieldsToGit_urlResolver<TParent>;
  id?: deployment_versions_max_fieldsToIdResolver<TParent>;
  last_commits?: deployment_versions_max_fieldsToLast_commitsResolver<TParent>;
  version?: deployment_versions_max_fieldsToVersionResolver<TParent>;
}

export interface deployment_versions_max_fieldsToBuild_host_nameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToDeployment_idResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToDocker_imageResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToDocker_image_tagResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToEnvResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToGit_branchResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToGit_commitResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToGit_hashResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToGit_urlResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToLast_commitsResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_max_fieldsToVersionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployment_versions_min_fieldsTypeResolver<TParent = any> {
  build_host_name?: deployment_versions_min_fieldsToBuild_host_nameResolver<TParent>;
  deployment_id?: deployment_versions_min_fieldsToDeployment_idResolver<TParent>;
  docker_image?: deployment_versions_min_fieldsToDocker_imageResolver<TParent>;
  docker_image_tag?: deployment_versions_min_fieldsToDocker_image_tagResolver<TParent>;
  env?: deployment_versions_min_fieldsToEnvResolver<TParent>;
  git_branch?: deployment_versions_min_fieldsToGit_branchResolver<TParent>;
  git_commit?: deployment_versions_min_fieldsToGit_commitResolver<TParent>;
  git_hash?: deployment_versions_min_fieldsToGit_hashResolver<TParent>;
  git_url?: deployment_versions_min_fieldsToGit_urlResolver<TParent>;
  id?: deployment_versions_min_fieldsToIdResolver<TParent>;
  last_commits?: deployment_versions_min_fieldsToLast_commitsResolver<TParent>;
  version?: deployment_versions_min_fieldsToVersionResolver<TParent>;
}

export interface deployment_versions_min_fieldsToBuild_host_nameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToDeployment_idResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToDocker_imageResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToDocker_image_tagResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToEnvResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToGit_branchResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToGit_commitResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToGit_hashResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToGit_urlResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToLast_commitsResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_min_fieldsToVersionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployments_aggregateTypeResolver<TParent = any> {
  aggregate?: deployments_aggregateToAggregateResolver<TParent>;
  nodes?: deployments_aggregateToNodesResolver<TParent>;
}

export interface deployments_aggregateToAggregateResolver<TParent = any, TResult = GQLdeployments_aggregate_fields|Promise<GQLdeployments_aggregate_fields>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_aggregateToNodesResolver<TParent = any, TResult = Array<GQLdeployments>|Promise<Array<GQLdeployments>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployments_aggregate_fieldsTypeResolver<TParent = any> {
  count?: deployments_aggregate_fieldsToCountResolver<TParent>;
  max?: deployments_aggregate_fieldsToMaxResolver<TParent>;
  min?: deployments_aggregate_fieldsToMinResolver<TParent>;
}

export interface deployments_aggregate_fieldsToCountArgs {
  columns?: GQLdeployments_select_column[];
  distinct?: boolean;
}
export interface deployments_aggregate_fieldsToCountResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: deployments_aggregate_fieldsToCountArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_aggregate_fieldsToMaxResolver<TParent = any, TResult = GQLdeployments_max_fields|Promise<GQLdeployments_max_fields>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_aggregate_fieldsToMinResolver<TParent = any, TResult = GQLdeployments_min_fields|Promise<GQLdeployments_min_fields>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployments_max_fieldsTypeResolver<TParent = any> {
  db_migration_image?: deployments_max_fieldsToDb_migration_imageResolver<TParent>;
  deployer_role?: deployments_max_fieldsToDeployer_roleResolver<TParent>;
  deployment_type?: deployments_max_fieldsToDeployment_typeResolver<TParent>;
  description?: deployments_max_fieldsToDescriptionResolver<TParent>;
  display_name?: deployments_max_fieldsToDisplay_nameResolver<TParent>;
  env?: deployments_max_fieldsToEnvResolver<TParent>;
  id?: deployments_max_fieldsToIdResolver<TParent>;
}

export interface deployments_max_fieldsToDb_migration_imageResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_max_fieldsToDeployer_roleResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_max_fieldsToDeployment_typeResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_max_fieldsToDescriptionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_max_fieldsToDisplay_nameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_max_fieldsToEnvResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_max_fieldsToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployments_min_fieldsTypeResolver<TParent = any> {
  db_migration_image?: deployments_min_fieldsToDb_migration_imageResolver<TParent>;
  deployer_role?: deployments_min_fieldsToDeployer_roleResolver<TParent>;
  deployment_type?: deployments_min_fieldsToDeployment_typeResolver<TParent>;
  description?: deployments_min_fieldsToDescriptionResolver<TParent>;
  display_name?: deployments_min_fieldsToDisplay_nameResolver<TParent>;
  env?: deployments_min_fieldsToEnvResolver<TParent>;
  id?: deployments_min_fieldsToIdResolver<TParent>;
}

export interface deployments_min_fieldsToDb_migration_imageResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_min_fieldsToDeployer_roleResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_min_fieldsToDeployment_typeResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_min_fieldsToDescriptionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_min_fieldsToDisplay_nameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_min_fieldsToEnvResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_min_fieldsToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLmutation_rootTypeResolver<TParent = any> {
  delete_deployment_versions?: mutation_rootToDelete_deployment_versionsResolver<TParent>;
  delete_deployments?: mutation_rootToDelete_deploymentsResolver<TParent>;
  insert_deployment_versions?: mutation_rootToInsert_deployment_versionsResolver<TParent>;
  insert_deployments?: mutation_rootToInsert_deploymentsResolver<TParent>;
  update_deployment_versions?: mutation_rootToUpdate_deployment_versionsResolver<TParent>;
  update_deployments?: mutation_rootToUpdate_deploymentsResolver<TParent>;
}

export interface mutation_rootToDelete_deployment_versionsArgs {
  where: GQLdeployment_versions_bool_exp;
}
export interface mutation_rootToDelete_deployment_versionsResolver<TParent = any, TResult = GQLdeployment_versions_mutation_response|Promise<GQLdeployment_versions_mutation_response>> {
  (parent: TParent, args: mutation_rootToDelete_deployment_versionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface mutation_rootToDelete_deploymentsArgs {
  where: GQLdeployments_bool_exp;
}
export interface mutation_rootToDelete_deploymentsResolver<TParent = any, TResult = GQLdeployments_mutation_response|Promise<GQLdeployments_mutation_response>> {
  (parent: TParent, args: mutation_rootToDelete_deploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface mutation_rootToInsert_deployment_versionsArgs {
  objects: GQLdeployment_versions_insert_input[];
  on_conflict?: GQLdeployment_versions_on_conflict;
}
export interface mutation_rootToInsert_deployment_versionsResolver<TParent = any, TResult = GQLdeployment_versions_mutation_response|Promise<GQLdeployment_versions_mutation_response>> {
  (parent: TParent, args: mutation_rootToInsert_deployment_versionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface mutation_rootToInsert_deploymentsArgs {
  objects: GQLdeployments_insert_input[];
  on_conflict?: GQLdeployments_on_conflict;
}
export interface mutation_rootToInsert_deploymentsResolver<TParent = any, TResult = GQLdeployments_mutation_response|Promise<GQLdeployments_mutation_response>> {
  (parent: TParent, args: mutation_rootToInsert_deploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface mutation_rootToUpdate_deployment_versionsArgs {
  _append?: GQLdeployment_versions_append_input;
  _delete_at_path?: GQLdeployment_versions_delete_at_path_input;
  _delete_elem?: GQLdeployment_versions_delete_elem_input;
  _delete_key?: GQLdeployment_versions_delete_key_input;
  _prepend?: GQLdeployment_versions_prepend_input;
  _set?: GQLdeployment_versions_set_input;
  where: GQLdeployment_versions_bool_exp;
}
export interface mutation_rootToUpdate_deployment_versionsResolver<TParent = any, TResult = GQLdeployment_versions_mutation_response|Promise<GQLdeployment_versions_mutation_response>> {
  (parent: TParent, args: mutation_rootToUpdate_deployment_versionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface mutation_rootToUpdate_deploymentsArgs {
  _append?: GQLdeployments_append_input;
  _delete_at_path?: GQLdeployments_delete_at_path_input;
  _delete_elem?: GQLdeployments_delete_elem_input;
  _delete_key?: GQLdeployments_delete_key_input;
  _prepend?: GQLdeployments_prepend_input;
  _set?: GQLdeployments_set_input;
  where: GQLdeployments_bool_exp;
}
export interface mutation_rootToUpdate_deploymentsResolver<TParent = any, TResult = GQLdeployments_mutation_response|Promise<GQLdeployments_mutation_response>> {
  (parent: TParent, args: mutation_rootToUpdate_deploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployment_versions_mutation_responseTypeResolver<TParent = any> {
  affected_rows?: deployment_versions_mutation_responseToAffected_rowsResolver<TParent>;
  returning?: deployment_versions_mutation_responseToReturningResolver<TParent>;
}

export interface deployment_versions_mutation_responseToAffected_rowsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployment_versions_mutation_responseToReturningResolver<TParent = any, TResult = Array<GQLdeployment_versions>|Promise<Array<GQLdeployment_versions>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLdeployments_mutation_responseTypeResolver<TParent = any> {
  affected_rows?: deployments_mutation_responseToAffected_rowsResolver<TParent>;
  returning?: deployments_mutation_responseToReturningResolver<TParent>;
}

export interface deployments_mutation_responseToAffected_rowsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface deployments_mutation_responseToReturningResolver<TParent = any, TResult = Array<GQLdeployments>|Promise<Array<GQLdeployments>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLsubscription_rootTypeResolver<TParent = any> {
  deployment_versions?: subscription_rootToDeployment_versionsResolver<TParent>;
  deployment_versions_aggregate?: subscription_rootToDeployment_versions_aggregateResolver<TParent>;
  deployment_versions_by_pk?: subscription_rootToDeployment_versions_by_pkResolver<TParent>;
  deployments?: subscription_rootToDeploymentsResolver<TParent>;
  deployments_aggregate?: subscription_rootToDeployments_aggregateResolver<TParent>;
  deployments_by_pk?: subscription_rootToDeployments_by_pkResolver<TParent>;
}

export interface subscription_rootToDeployment_versionsArgs {
  distinct_on?: GQLdeployment_versions_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployment_versions_order_by[];
  where?: GQLdeployment_versions_bool_exp;
}
export interface subscription_rootToDeployment_versionsResolver<TParent = any, TResult = Array<GQLdeployment_versions>|Promise<Array<GQLdeployment_versions>>> {
  (parent: TParent, args: subscription_rootToDeployment_versionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface subscription_rootToDeployment_versions_aggregateArgs {
  distinct_on?: GQLdeployment_versions_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployment_versions_order_by[];
  where?: GQLdeployment_versions_bool_exp;
}
export interface subscription_rootToDeployment_versions_aggregateResolver<TParent = any, TResult = GQLdeployment_versions_aggregate|Promise<GQLdeployment_versions_aggregate>> {
  (parent: TParent, args: subscription_rootToDeployment_versions_aggregateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface subscription_rootToDeployment_versions_by_pkArgs {
  id: string;
}
export interface subscription_rootToDeployment_versions_by_pkResolver<TParent = any, TResult = GQLdeployment_versions|Promise<GQLdeployment_versions>> {
  (parent: TParent, args: subscription_rootToDeployment_versions_by_pkArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface subscription_rootToDeploymentsArgs {
  distinct_on?: GQLdeployments_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployments_order_by[];
  where?: GQLdeployments_bool_exp;
}
export interface subscription_rootToDeploymentsResolver<TParent = any, TResult = Array<GQLdeployments>|Promise<Array<GQLdeployments>>> {
  (parent: TParent, args: subscription_rootToDeploymentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface subscription_rootToDeployments_aggregateArgs {
  distinct_on?: GQLdeployments_select_column[];
  limit?: number;
  offset?: number;
  order_by?: GQLdeployments_order_by[];
  where?: GQLdeployments_bool_exp;
}
export interface subscription_rootToDeployments_aggregateResolver<TParent = any, TResult = GQLdeployments_aggregate|Promise<GQLdeployments_aggregate>> {
  (parent: TParent, args: subscription_rootToDeployments_aggregateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface subscription_rootToDeployments_by_pkArgs {
  id: string;
}
export interface subscription_rootToDeployments_by_pkResolver<TParent = any, TResult = GQLdeployments|Promise<GQLdeployments>> {
  (parent: TParent, args: subscription_rootToDeployments_by_pkArgs, context: any, info: GraphQLResolveInfo): TResult;
}
